using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.IO;using System.Linq;using System.Management;using System.Text;using System.Threading;using System.Threading.Tasks;using System.Windows.Forms;using WindowsFormsApp1.DeviceComputes;using WindowsFormsApp1.Math.Statistics;using WindowsFormsApp1.Utils;using GASS.CUDA;using MathNet.Numerics.Statistics;using MathNet;using static MathNet.Numerics.Random.RandomExtensions;namespace WindowsFormsApp1{    public partial class Form1 : Form    {        private List<double[]> _fileArrays;        private string outputFolder;        private IComputeDevice device;        private Queue<string> filePathes = new Queue<string>();                private Task fileReader;                private int _shiftWidth, _batchSize;        private List<int> activeSignalIndexes = new List<int>();        private int mainSignal;        public Form1()        {            InitializeComponent();            computeDevice.SelectedIndex = 0;        }        private void ButtonLoadClick(object sender, EventArgs e)        {            _fileArrays = new List<double[]>();            using (var ofd = new System.Windows.Forms.OpenFileDialog())            {                if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK)                {                    TryInit(ofd.FileName);                    filePathes.Enqueue(ofd.FileName);                    fileReader.Wait();                    FillDataGrid();                                    }                else                {                    MessageBox.Show("Не выбран файл!");                }            }        }        private void TryInit(string filePath)        {            fileReader = new Task(() =>            {                var lines = File.ReadLines(filePath);                char fileSeparator = GetCurrentSeparator(lines.First());                InitArrays(lines.Count(), lines.First().Split(fileSeparator).Length);                VolatileRead(lines, fileSeparator);            });            fileReader.Start();        }        void InitArrays(int rowLength, int rows)        {            for (int i = 0; i < rows; i++)            {                _fileArrays.Add(new double[rowLength]);            }        }        private char GetCurrentSeparator(string line1)        {            foreach (var sep in " \t,")            {                if (line1.Contains(sep) && line1.Split(sep).Length > 1)                {                    return sep;                }            }            throw new FileLoadException("Bad file format!");        }        private void VolatileRead(IEnumerable<string> lines, char separator)        {            for (int i = 0; i < 100; i++)            {                var splitted = lines.ElementAt(i).Split(separator);                for (int j = 0; j < splitted.Length; j++)                {                    _fileArrays.ElementAt(j)[i] = Double.Parse(splitted[j]);                }            }        }        private void FillDataGrid()        {            int width = _fileArrays[0].Length > 30 ? 30 : _fileArrays[0].Length;            for (int i = 0; i < width; i++)            {                dataGridView1.Columns.Add(new DataGridViewTextBoxColumn());            }            for (int i = 0; i < _fileArrays.Count - 1; i++)            {                dataGridView1.Rows.Add(new DataGridViewRow());            }            ReFillDataGrid();        }        private void ReFillDataGrid()        {            int width = _fileArrays[0].Length > 30 ? 30 : _fileArrays[0].Length;            for (int i = 2; i < width + 2; i++)            {                for (int j = 0; j < _fileArrays.Count; j++)                {                    dataGridView1.Rows[j].Cells[i].Value = _fileArrays[j][i - 2];                }            }            for (int i = dataGridView1.Rows.Count - 1; i > -1; i--)            {                DataGridViewRow row = dataGridView1.Rows[i];                if (!row.IsNewRow && row.Cells[5].Value == null)                {                    dataGridView1.Rows.RemoveAt(i);                }            }            ((System.ComponentModel.ISupportInitialize) (this.dataGridView1)).BeginInit();            ((System.ComponentModel.ISupportInitialize) (this.dataGridView1)).EndInit();        }                        private void GetSignalIndexes()        {            activeSignalIndexes.Clear();            for (int i = 0; i < _fileArrays.Count; i++)            {                var it =dataGridView1.Rows[i].Cells[0].Value == null ? false : dataGridView1.Rows[i].Cells[0].Value;                if ((bool) it )                {                    mainSignal = i;                }                var ot = dataGridView1.Rows[i].Cells[1].Value == null ? false : dataGridView1.Rows[i].Cells[1].Value;                if ((bool) ot)                {                    activeSignalIndexes.Add(i);                }            }                    }                private void InitComputeDevice(string filePath)        {            if (int.TryParse(BatchSizeBox.Text, out _batchSize) && int.TryParse(shiftBox.Text, out _shiftWidth))            {                switch (computeDevice.SelectedIndex) // CPU Parallel                 {                    case 0:                        device = new CpuComputeDevice(outputFolder, filePath);                        break;                    case 1:                        device = new OpenBLASCompute(outputFolder, filePath);                        break;                    case 2:                        device = new CUDACompute(outputFolder, filePath);                        break;                    case 3:                        device = new CppCPUCompute(outputFolder, filePath);                        break;                }            }        }        private void CalculateClick(object sender, EventArgs e)        {            if (filePathes.Count > 0)            {                if (fileReader.Status == TaskStatus.Running)                {                    fileReader.Wait();                }                var path = filePathes.Dequeue();                InitComputeDevice(path);                GetSignalIndexes();                var watch = System.Diagnostics.Stopwatch.StartNew();                device.ShiftCompute(_fileArrays, _shiftWidth, _batchSize, mainSignal, activeSignalIndexes);                watch.Stop();                var elapsedMs = ((double) watch.ElapsedMilliseconds / 1000);                Console.WriteLine("Time of exection: " + elapsedMs);            }            else            {                MessageBox.Show("Нету файлов для расчетов");            }            if (filePathes.Count > 0)            {                _fileArrays = new List<double[]>();                TryInit(filePathes.First());                fileReader.Wait();                ReFillDataGrid();            }                    }                        private void computeDevice_SelectedIndexChanged(object sender, EventArgs e)        {            if (computeDevice.SelectedIndex == 2)            {                if ((new CUDA(true).Devices.Length != 0))                {                    ManagementObjectSearcher myVideoObject =                        new ManagementObjectSearcher("select * from Win32_VideoController");                    foreach (ManagementObject obj in myVideoObject.Get())                    {                        DeviceListBox.Text = $"Device: {obj["Name"]}\n";                    }                }                else                {                    DeviceListBox.Text = "No CUDA device found!";                }            }            else             {                ManagementObjectSearcher myProcessorObject =                     new ManagementObjectSearcher("select * from Win32_Processor");                foreach (ManagementObject obj in myProcessorObject.Get())                {                    DeviceListBox.Text = $"Device: {obj["Name"]} \n";                }                            }        }        private void PickOutputFolderClick(object sender, EventArgs e)        {            using (var fbd = new System.Windows.Forms.FolderBrowserDialog())            {                if (fbd.ShowDialog() == System.Windows.Forms.DialogResult.OK)                {                    outputFolder = fbd.SelectedPath;                }                else                {                    MessageBox.Show("Папка не выбрана!");                }            }        }        private void ButtonLoadDirClick(object sender, EventArgs e)        {            _fileArrays = new List<double[]>();            using (var fbd = new System.Windows.Forms.FolderBrowserDialog())            {                if (fbd.ShowDialog() == System.Windows.Forms.DialogResult.OK)                {                    foreach (var path in Directory.GetFiles(fbd.SelectedPath))                    {                        filePathes.Enqueue(path);                    }                }            }            TryInit(filePathes.First());            fileReader.Wait();            FillDataGrid();        }    }}